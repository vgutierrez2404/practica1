package es.upm.dit.adsw.practica1;
import java.util.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author juancarlosduenaslopez
 * @author mmiguel
 *
 */
public class DetectorVehiculos {

	private Vehiculo v;
	private List<Vehiculo> detectados;
	private int n;
	
	/**
	 * Construye un DetectorVehiculos para el vehiculo v 
	 * @param v vehiculo en el que se encuentra el detector
	 */
	public DetectorVehiculos(Vehiculo v) {
		this.v = v;
		this.detectados = new ArrayList<Vehiculo> (); 
		this.n = 0;
		v.setDetector(this);// esto eseta bien. Es para saber quien es el vehiculo del detector
	}

	/**
	 * Devuelve el vehiculo respecto del que se hacen las detecciones
	 * @return vehiculo del detector
	 */
	public Vehiculo getV() {
		return this.v;
	}
		
	@Override
	public String toString() {
		return "DetectorVehiculos [v=" + v + ", detectados=" + detectados + "]";
	}
	
	/**
	 * Incluye un vehiculo como detectado
	 * @param v nuevo vehiculo detectado
	 */
	public void addVehiculo (Vehiculo v) {
		this.detectados.add(v);
	}

	/**
	 * Busca un vehiculo entre los detectados, teniedo en cuenta que la 
	 * busqueda se hace a partir de los identificadores
	 * @param veh vehiculo a buscar
	 * @return datos que tenemos del vehiculo encontrado. Null si no estÃ¡ entre los detectados
	 */
	public Vehiculo buscaVehiculo(Vehiculo veh) {
		if (this.detectados.contains(veh))
			return this.detectados.get(this.detectados.indexOf(veh));
		return null;
	}

	
	/**
	 * Obtiene el conjunto de vehiculos detectados que cumplen el selector
	 * @param s selector de filtrado de vehiculos
	 * @return conjunto de detectados que cumplen la seleccion
	 */
	public List<Vehiculo> getVehiculos (SelectorVehiculo s) {
		ArrayList<Vehiculo> vs = new ArrayList<Vehiculo> ();
		for (Vehiculo v : this.detectados) {
			if (s.seleccionar(v))
				vs.add(v);
		}
		return vs;
	}
	
	/**
	 * Anade una nueva deteccion comprobado si estaba anteriormente detectado. Para
	 * ver si estaba anteriormente detectado, filtra los detectados para ver si tienen una
	 * posicion compatible con v, si encuentra alguno, actualiza su posicion, y si no
	 * lo anade como nueva deteccion
	 * @param v posicion del vehiculo detectado
	 * @param t instante de la deteccion
	 */
	public void addDeteccion(Vector v, double t) {
		SelectorVehiculo s = new SelectorVehiculoCompatible(v, t);
		List<Vehiculo> compatibles = this.getVehiculos(s);
		if (compatibles.size() > 0) {
			compatibles.get(0).mover(v, t);
		}
		else {
			Vehiculo veh = new Vehiculo("AUTO" + this.n, v, t, v, t);
			this.n ++;
			this.addVehiculo(veh);
		}
	}
	
	private enum Orden {Antes,Igual,Despues};
	// Nos dice si v1 va a impactar con nuestro vehiculo antes, igual o despues que v2
	private Orden impactoRelativoAEsteVehiculo(Vehiculo v1, Vehiculo v2) {
		double t1=v.impacto(v1);
		double t2=v.impacto(v2);
		if (t1 == t2)
			return Orden.Igual;
		if (t1 == Double.POSITIVE_INFINITY)
			return Orden.Despues;
		if (t2 == Double.POSITIVE_INFINITY)
			return Orden.Antes;
		if (t1 > 0.0)
			if (t2 > 0.0)
				if (t1 < t2)
					return Orden.Antes;
				else
					return Orden.Despues;
			else
				return Orden.Antes;
		else
			if (t2 < 0.0)
				if (t1 < t2)
					return Orden.Antes;
				else
					return Orden.Despues;
			else
				return Orden.Despues;
	}
	
	
	public java.util.List<Vehiculo> vehiculoSeMueve(double t){
		
		List<Vehiculo> detectados2 = new ArrayList<Vehiculo>();
		detectados2=detectados;
		
		for (int i=0; i < detectados2.size();i++) {
			detectados2.get(i).moverVehiculo(t); //que sentido tiene poner el getdetector aqui?
			
		//	if (detectados2.get(i).getVelocidad().modulo()<2)
				//detectados2.get(i).isParado() == true;
		}
		
		boolean changed;
			do { 
				changed = false;
			for (int i = 0; i < detectados2.size()-1; i++) {
            if (impactoRelativoAEsteVehiculo(detectados2.get(i),detectados2.get(i+1)) ==Orden.Despues) {
                Collections.swap(detectados2, i, i + 1);
                 changed = true;
                          }
			}
				} 		
			while (changed);
			
			for(int i=0;i<detectados2.size();i++) {
					if(detectados2.get(i).getDetector().buscaVehiculo(v)==v)
						v.mover(t);
					else
					detectados2.get(i).getDetector().addVehiculo(v);
					}
			return detectados2;


			}

	public void moverVehiculo(double t) {
		if (t == v.getT())
			return;
		Vector nuevo = new Vector(v.getPos().getX() + v.getVelocidad().getX() * (t - v.getT()),
				v.getPos().getY() + v.getVelocidad().getY() * (t - v.getT()));
		v.mover(nuevo, t);
	} 
}
